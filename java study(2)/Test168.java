/*============================
자바의 기본 입출력
==============================
자바의 기본 입출력 개요
-자바에서의 모든 데이터 입출력은 스트림이라는 개념에 의해 이루어진다
(연속된 일련의 데이터를 말함)
-데이터 입출력 시 모든 데이터를 형태와 관계없이 일련된 흐름으로
전송하는 것이 스트림 입출력 모델의 기본 개념이다
-기본적으로 스트림에는 바이트 기반과 문자기반의 스트림이 있다

바이트 스트림 입출력
-inputstream 클래스와 outputstream 클래스, 하위 클래스를 통해
제공되는 바이트 스트림을 위한 표준 입출력으로 8비트 크기를 갖는 바이트들의 스트림이 입출력된다
(바이트, 바이트배열, 정수)

문자 스트림 입출력
-reader 클래스와 writer클래스, 그리고 이들의 하위 클래스에 의해 구현되었으며
8비트 크기를 갖는 바이트들의 스트림이 아닌 16비트 크기를 같는 유니코드 문자들의 스트림이라는 점에서 차이 있음
(문자, 문자배열, 문자열 등)

※ 스트림의 특징
스트림은 FIFO 구조이다.
FIFO 구조란, 먼ㅁ저 들어간 것이 먼저 나오는 형태로
스트림의 데이터는 순차적으로 흘러가며 순차적 접근만 허용됨

-스트림은 단방향이다
자바에서 스트림은 읽기 쓰기가 동시에 이루어 지지 않음
읽기 쓰기가 필요하다면 읽는 스트림과 쓰는 스트림을 하나씩 열어 사용해야 함

-스트림은 지연될 수 있다
스트림에 넣어진 데이터는 처리 되기 전에는 스트림에 사용되하는 스레드는
지연 상태에 빠진다
네트워크 상에서는 데이터가 모두 전송되기 전까지 스레드는 지연 상태가 된다.
*/
import java.io.IOException;

public class Test168
{
	public static void main(String[] args) throws IOException
	{
		int data;
		char ch;
		
		//read() : InputStream 클래스의 대표적 메소드(→바이트 스트림)
		System.out.println("문자열 입력 (종료 : ctrl+z)");
		while((data = System.in.read()) != -1) //바이트 변수 읽어 data에 담는다 아스키코드로 // null이 아니라 입력이 제대로 되었다면
		{
			ch = (char)data; //형변환해서 넣는다
			//System.out.print(ch); //문자 기반으로 출력하는 스트림

			//write() : OutputSteam 클래스의 대표적 메소드(→ 바이트 스트림)
			System.out.write(ch);
		}
	}
}
